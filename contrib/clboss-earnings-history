#!/usr/bin/env python3

import subprocess
import argparse
import json
from datetime import datetime
from tabulate import tabulate

def run_lightning_cli_command(network_option, command, *args):
    try:
        result = subprocess.run(['lightning-cli', network_option, command, *args], capture_output=True, text=True, check=True)
        return json.loads(result.stdout)
    except subprocess.CalledProcessError as e:
        print(f"Command '{command}' failed with error: {e}")
    except json.JSONDecodeError as e:
        print(f"Failed to parse JSON from command '{command}': {e}")
    return None

def format_bucket_time(bucket_time):
    if bucket_time == 0:
        return "Legacy"
    else:
        return datetime.utcfromtimestamp(bucket_time).strftime('%Y-%m-%d')

def main():
    parser = argparse.ArgumentParser(description="Run lightning-cli with specified network")
    parser.add_argument('--mainnet', action='store_true', help='Run on mainnet')
    parser.add_argument('--testnet', action='store_true', help='Run on testnet')

    args = parser.parse_args()

    if args.testnet:
        network_option = '--testnet'
    else:
        network_option = '--mainnet'  # Default to mainnet if no option is specified

    # Replace the API call
    earnings_data = run_lightning_cli_command(network_option, 'clboss-earnings-history')

    # Initialize totals
    total_forwarded = 0
    total_earnings = 0
    total_rebalanced = 0
    total_expense = 0
    total_net_earnings = 0

    # Process and format data
    rows = []
    for entry in earnings_data['history']:
        bucket_time = format_bucket_time(entry['bucket_time'])
        earnings = entry['in_earnings']
        forwarded = entry['in_forwarded']
        expense = entry['in_expenditures']
        rebalanced = entry['in_rebalanced']
        
        # Calculate rates with checks for division by zero
        forwarded_rate = (earnings / forwarded) * 1_000_000 if forwarded != 0 else 0
        rebalance_rate = (expense / rebalanced) * 1_000_000 if rebalanced != 0 else 0
        net_earnings = earnings - expense
        
        # Update totals
        total_forwarded += forwarded
        total_earnings += earnings
        total_rebalanced += rebalanced
        total_expense += expense
        total_net_earnings += net_earnings

        rows.append([
            bucket_time,
            f"{forwarded:,}".replace(',', '_'),
            f"{forwarded_rate:,.0f}",
            f"{earnings:,}".replace(',', '_'),
            f"{rebalanced:,}".replace(',', '_'),
            f"{rebalance_rate:,.0f}",
            f"{expense:,}".replace(',', '_'),
            f"{int(net_earnings):,}".replace(',', '_')
        ])

    # Calculate total rates
    total_forwarded_rate = (total_earnings / total_forwarded) * 1_000_000 if total_forwarded != 0 else 0
    total_rebalance_rate = (total_expense / total_rebalanced) * 1_000_000 if total_rebalanced != 0 else 0

    # Add a separator row
    separator_row = ["-" * len(header) for header in ["Date", "Forwarded", "Rate", "Earnings", "Rebalanced", "Rate", "Expense", "Net Earnings"]]
    rows.append(separator_row)
    
    # Append the total row
    rows.append([
        "TOTAL",
        f"{total_forwarded:,}".replace(',', '_'),
        # misleading because legacy: f"{total_forwarded_rate:,.0f}",
        f"",
        f"{total_earnings:,}".replace(',', '_'),
        f"{total_rebalanced:,}".replace(',', '_'),
        # misleading because legacy: f"{total_rebalance_rate:,.0f}",
        f"",
        f"{total_expense:,}".replace(',', '_'),
        f"{int(total_net_earnings):,}".replace(',', '_')
    ])

    headers = [
        "Date",
        "Forwarded",
        "Rate",
        "Earnings",
        "Rebalanced",
        "Rate",
        "Expense",
        "Net Earnings"
    ]

    print(tabulate(rows, headers=headers, tablefmt="pretty", stralign="right", numalign="right"))

if __name__ == "__main__":
    main()
