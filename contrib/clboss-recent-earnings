#!/usr/bin/env python3

import subprocess
import argparse
import json
from tabulate import tabulate

def run_lightning_cli_command(network_option, command, *args):
    try:
        result = subprocess.run(['lightning-cli', network_option, command, *args], capture_output=True, text=True, check=True)
        return json.loads(result.stdout)
    except subprocess.CalledProcessError as e:
        print(f"Command '{command}' failed with error: {e}")
    except json.JSONDecodeError as e:
        print(f"Failed to parse JSON from command '{command}': {e}")
    return None

def lookup_alias(network_option, peer_id):
    listnodes_data = run_lightning_cli_command(network_option, 'listnodes', peer_id)
    if listnodes_data:
        nodes = listnodes_data.get("nodes", [])
        for node in nodes:
            alias = node.get("alias")
            if alias:
                return alias
    return peer_id  # Fallback to peer_id if alias is not found

def calculate_net_earnings(data, network_option):
    rows = []
    
    # Initialize totals
    total_net_earnings = 0
    total_in_earnings = 0
    total_in_forwarded = 0
    total_in_expenditures = 0
    total_in_rebalanced = 0
    total_out_earnings = 0
    total_out_forwarded = 0
    total_out_expenditures = 0
    total_out_rebalanced = 0

    for node, stats in data['recent'].items():
        in_earnings = stats['in_earnings']
        in_forwarded = stats['in_forwarded']
        in_expenditures = stats['in_expenditures']
        in_rebalanced = stats['in_rebalanced']
        
        out_earnings = stats['out_earnings']
        out_forwarded = stats['out_forwarded']
        out_expenditures = stats['out_expenditures']
        out_rebalanced = stats['out_rebalanced']
        
        # Skip rows where all values are zero
        if (
            in_earnings == 0 and in_forwarded == 0 and in_expenditures == 0 and in_rebalanced == 0 and
            out_earnings == 0 and out_forwarded == 0 and out_expenditures == 0 and out_rebalanced == 0
        ):
            continue

        alias = lookup_alias(network_option, node)
        in_rate = (in_earnings / in_forwarded) * 1_000_000 if in_forwarded != 0 else 0
        in_rebalance_rate = (in_expenditures / in_rebalanced) * 1_000_000 if in_rebalanced != 0 else 0
        out_rate = (out_earnings / out_forwarded) * 1_000_000 if out_forwarded != 0 else 0
        out_rebalance_rate = (out_expenditures / out_rebalanced) * 1_000_000 if out_rebalanced != 0 else 0

        net_earnings = in_earnings - in_expenditures + out_earnings - out_expenditures
        
        # Update totals
        total_net_earnings += net_earnings
        total_in_earnings += in_earnings
        total_in_forwarded += in_forwarded
        total_in_expenditures += in_expenditures
        total_in_rebalanced += in_rebalanced
        total_out_earnings += out_earnings
        total_out_forwarded += out_forwarded
        total_out_expenditures += out_expenditures
        total_out_rebalanced += out_rebalanced

        avg_in_earnings_rate = (total_in_earnings / total_in_forwarded) * 1_000_000 if total_in_forwarded != 0 else 0
        avg_out_earnings_rate = (total_out_earnings / total_out_forwarded) * 1_000_000 if total_out_forwarded != 0 else 0
        avg_in_expenditures_rate = (total_in_expenditures / total_in_rebalanced) * 1_000_000 if total_in_rebalanced != 0 else 0
        avg_out_expenditures_rate = (total_out_expenditures / total_out_rebalanced) * 1_000_000 if total_out_rebalanced != 0 else 0
        
        rows.append([
            alias,
            f"{in_forwarded:,}".replace(',', '_'),
            f"{in_rate:,.0f}",
            f"{in_earnings:,}".replace(',', '_'),
            f"{out_forwarded:,}".replace(',', '_'),
            f"{out_rate:,.0f}",
            f"{out_earnings:,}".replace(',', '_'),
            f"{in_rebalanced:,}".replace(',', '_'),
            f"{in_rebalance_rate:,.0f}",
            f"{in_expenditures:,}".replace(',', '_'),
            f"{out_rebalanced:,}".replace(',', '_'),
            f"{out_rebalance_rate:,.0f}",
            f"{out_expenditures:,}".replace(',', '_'),
            f"{net_earnings:,}".replace(',', '_'),
        ])
    
    # Divide the net earnings total by 2
    total_net_earnings /= 2
    
    # Add a separator row
    separator_row = ["-" * len(header) for header in [
        "Alias",
        "In Forwarded",
        "Rate",
        "In Earn",
        "Out Forwarded",
        "Rate",
        "Out Earn",
        "In Rebal",
        "Rate",
        "In Exp",
        "Out Rebal",
        "Rate",
        "Out Exp",
        "Net Earn",
    ]]
    rows.append(separator_row)
    
    # Append the total row
    rows.append([
        "TOTAL",
        f"{total_in_forwarded:,}".replace(',', '_'),
        f"{avg_in_earnings_rate:,.0f}",
        f"{total_in_earnings:,}".replace(',', '_'),
        f"{total_out_forwarded:,}".replace(',', '_'),
        f"{avg_out_earnings_rate:,.0f}",
        f"{total_out_earnings:,}".replace(',', '_'),
        f"{total_in_rebalanced:,}".replace(',', '_'),
        f"{avg_in_expenditures_rate:,.0f}",
        f"{total_in_expenditures:,}".replace(',', '_'),
        f"{total_out_rebalanced:,}".replace(',', '_'),
        f"{avg_out_expenditures_rate:,.0f}",
        f"{total_out_expenditures:,}".replace(',', '_'),
        f"{int(total_net_earnings):,}".replace(',', '_'),
    ])

    return rows

def main():
    parser = argparse.ArgumentParser(description="Run lightning-cli with specified network")
    parser.add_argument('recent_earnings_arg', type=int, help='Argument to pass to clboss-recent-earnings')

    args = parser.parse_args()

    network_option = '--mainnet'  # Default to mainnet

    earnings_data = run_lightning_cli_command(network_option, 'clboss-recent-earnings', str(args.recent_earnings_arg))

    if earnings_data:
        rows = calculate_net_earnings(earnings_data, network_option)
        print(tabulate(rows, headers=[
            "Alias",
            "In Forwarded",
            "Rate",
            "In Earn",
            "Out Forwarded",
            "Rate",
            "Out Earn",
            "In Rebal",
            "Rate",
            "In Exp",
            "Out Rebal",
            "Rate",
            "Out Exp",
            "Net Earn",
        ],tablefmt="pretty", stralign="right", numalign="right"))

if __name__ == "__main__":
    main()
